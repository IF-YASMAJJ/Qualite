
model SystemeDrones

--Énumération pour l'état d'un drone
enum EtatDuDrone {Attente, Livraison, Rechargement}

--Définition des classes
class EtatSysteme end

class UniteDeTemps 
attributes
	temps : Integer
end

class Drone 
attributes
	DCAP : Integer
	idDrone : Integer
	deplacementPossible : Boolean
operations
	seDeplacer(p : Point)
	testerDeplacement(p : Point)
end

class Terrain 
attributes
	RNB : Integer
	DNB : Integer
end

class Livraison 
attributes
	idLivraison : Integer
end

class Chemin end

class Point
attributes
	coordX : Integer
	coordY : Integer
end

class Entrepot < Point
end
class Receptacle < Point
attributes
	RCAP : Integer
end
class Commande 
attributes
	idCommande : Integer
end
class Produit 
attributes
	idProduit : Integer
end
--Fin de définition des classes


--Définition des associations
association EtatSystemeUniteDeTemps between
	EtatSysteme[1] role etat;
	UniteDeTemps[1] role temps
end

association Order between
	UniteDeTemps[*] role pred;
	UniteDeTemps[*] role succ;
end


association DroneLivraison between
	Drone[0..1] role drone;
	Livraison[0..1] role livraison
end

association LivraisonChemin between
	Livraison[1] role livraison;
	Chemin[1] role chemin;
end

association DroneTerrain between
	Terrain[1] role terrain;
	Drone[*] role drone;
end

association TerrainPoint between
	Terrain[1] role terrain;
	Point[*] role point;
end

association LivraisonCommande between
	Livraison[1] role livraison;
	Commande[1..*] role commande;
end

association CommandeProduit between
	Produit[*] role produit;
	Commande[*] role commande;
end

association CheminPoint between
	Chemin[*] role chemin;
	Point[*] role point;
end

association EtatLivraison between
	EtatSysteme[*] role etat;
	Livraison[*] role livraison;
end
--Fin de définition des associations

--Définition des associationclass
associationclass EtatDrone between
	EtatSysteme[*];
	Drone[*];
attributes
	positionDrone : Point
	dureeDeVie : Integer
	etat : EtatDuDrone
	livraisonDrone : Livraison
end

associationclass EtatPoint between
	EtatSysteme[*];
	Point[*];
attributes
	estOccupe : Boolean
end

associationclass EtatReceptacle < EtatPoint between
	EtatSysteme[*];
	Receptacle[*];
attributes
	nbProduits : Integer
end
--Fin de définition des associationclass


--Définition des contraintes-invariants
constraints

context Terrain inv oneTerrain: Terrain.allInstances->size=1

--Pre/Post conditions
context Drone::seDeplacer(p : Point)
	pre deplacerPre1 : deplacementPossible
	--post : TODO

--context Drone::testerDeplacement(p : Point)
--	pre 
--Fin des Pre/Post conditions

--Fin de définition des contraintes-invariants
